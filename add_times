#!/bin/bash

# TODO:
# add other operations (subtract, multiply, divide)

# add_times [OPTIONS] [ TIME [ ... ] ]
# adds each TIME together and prints the result to stdout. each TIME must be in
# the format HH:MM. if no TIME is supplied, either enters a special interactive
# mode if stdin is open on atty, or reads TIMEs from the standard input, one
# TIME per line.
#
#  Options:
#   -h, --help      Display this help and exit
#   -s, --seconds   Add seconds as well, TIME must be in the format HH:MM:SS
#   -S, --subtract  Subtract each number, instead of adding
#
# in the interactive mode, add_times will act in the following manner:
# if --seconds is supplied, accepts them first. then, it accepts minutes, and
# finally hours. if an empty value for seconds or minutes (depending on
# --seconds) is supplied, add_times stops reading input. this eases input with
# the number pad

shopt -s extglob

# default vars
oper=add   # operation to perform
seconds=0  # controls whether or not to use seconds
times=()   # times to add
hrs=()     # array of hour components
mins=()    # array of minute components
secs=()    # array of second components
tot_secs=0 # total seconds
tot_mins=0 # total minutes
tot_hrs=0  # total hours

# usage: is_int NUM
# returns 0 if NUM is a valid integer, otherwise 1. empty values are valid
is_int() {
  [[ $1 = *[!0-9]* ]]
}

# gets time interactively. returns 2 if input is to be ended, 1 if an invalid
# input is given
# prints the time to stdout
get_time() {
  local h m c i

  if ((seconds)); then
    local s

    read -n 2 s # read in seconds
    # validate seconds, break on empty value
    if [[ -z $s ]]; then
      return 2
    elif ! is_int "$s"; then
      return 1
    fi
    printf '\r  :%02d\r' "$s" >&2 # print seconds
    read -n 2 m # read in minutes
    is_int "$m" || return 1 # validate
    printf '\r :%02d:%02d\r' "$m" "$s" >&2 # print minutes and seconds
    # read in hours
    i=1
    while read -n 1 c && [[ $c ]]; do
      is_int "$c" || return 1 # validate
      h+=$c # append to hours
      printf '\r%*s:%02d:%02d\r%d' "$((++i))" ' ' "$m" "$s" "$h" >&2 # reprint
    done
    
    # print time to stdout
    printf '%02d:%02d:%02d\n' "$h" "$m" "$s"

  # seconds was not supplied
  else
    read -n 2 m # read in minutes
    # validate, break on empty value
    if [[ -z $m ]]; then
      return 2
    elif ! is_int "$m"; then
      return 1
    fi
    printf '\r :%02d\r' "$m" >&2 # print minutes
    # read in hours
    i=1
    while read -n 1 c && [[ $c ]]; do
      is_int "$c" || return 1 # validate
      h+=$c # append to hours
      printf '\r%*s:%02d\r%d' "$((++i))" ' ' "$m" "$h" >&2 # reprint
    done

    # print time to stdout
    printf '%02d:%02d\n' "$h" "$m"
  fi

  return 0
}

# show the usage info
usage() {
cat <<'EOF'
add_times [OPTIONS] [ TIME [ ... ] ]
adds each TIME together and prints the result to stdout. each TIME must be in
the format HH:MM. if no TIME is supplied, either enters a special interactive
mode if stdin is open on atty, or reads TIMEs from the standard input, one
TIME per line.

 Options:
  -h, --help      Display this help and exit
  -s, --seconds   Add seconds as well, TIME must be in the format HH:MM:SS
  -S, --subtract  Subtract each number, instead of adding

in the interactive mode, add_times will act in the following manner:
if --seconds is supplied, accepts them first. then, it accepts minutes, and
finally hours. if an empty value for seconds or minutes (depending on
--seconds) is supplied, add_times stops reading input. this eases input with
the number pad
EOF
}

# validate a time, based on "seconds". returns 0 if valid, otherwise 1
is_valid() {
  local t=$1

  if ((seconds)); then
    local s m

    s=${t##*:} m=${t#*:} m=${m%:*}
    if [[ $t != +([0-9]):[0-9][0-9]:[0-9][0-9] ]] ||
       ((s >= 60 || m >= 60)); then
      return 1
    fi
  else
    if [[ $t != +([0-9]):[0-9][0-9] ]] || ((${t#*:} >= 60)); then
      return 1
    fi
  fi

  return 0
}

# break options into a more parsable format
optstring=hsS
unset options
while (($#)); do
  case $1 in
    -[!-]?*)
      for ((i=1; i<${#1}; i++)); do
        c=${1:i:1}; options+=("-$c")

        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*) options+=("${1%%=*}" "${1#*=}");;
    # end of options, stop breaking them up
    --)
      options+=(--endopts)
      shift
      options+=("$@")
      break
      ;;
    *) options+=("$1");;
  esac

  shift
done
set -- "${options[@]}"
unset options

# actually parse the options and do stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -h|--help) usage >&2; exit 0;;
    -s|--seconds) seconds=1;;
    -S|--subtract) oper=sub;;
    --endopts) shift; break;;
    *) printf 'invalid option: %s\n' "$1" >&2; exit 1;;
  esac

  shift
done

# TIME is supplied, use the args
if (($#)); then
  # validate each and append to array
  for t; do
    if ! is_valid "$t"; then
      printf 'invalid time: %s\n' "$t"
      exit 1
    fi

    times+=("$t")
  done

# no TIME is supplied...
else
  # stdin is a tty, get them interactively
  if [[ -t 0 ]]; then
    while t=$(get_time); r=$?; ((r < 2)); do
      if ((r)) || ! is_valid "$t"; then
        printf 'invalid time: %s\n' "$t"
        continue
      fi

      times+=("$t")
    done

  # stdin is not a tty, just read one per line
  else
    while read -r t; do
      if ! is_valid "$t"; then
        printf 'invalid time: %s\n' "$t"
        exit 1
      fi

      times+=("$t")
    done
  fi
fi

# add or subtract based on $oper
case $oper in
  add)
    # break TIMEs into hours and minutes, and possibly seconds
    hrs=("${times[@]%%:*}")
    if ((seconds)); then
      mins=("${times[@]#*:}")
      mins=("${mins[@]%:*}")
      secs=("${times[@]##*:}")
    else
      mins=("${times[@]#*:}")
    fi

    # if seconds is used, add totals, get end result, and add what's needed to mins
    if ((seconds)); then
      for s in "${secs[@]}"; do
        ((tot_secs += s))
      done

      tot_mins+=$((tot_secs / 60))
      tot_secs=$((tot_secs % 60))
    fi

    # add total minutes
    for m in "${mins[@]}"; do
      ((tot_mins += m))
    done

    # get end result for mins (modulo of 60), and what to add to hrs
    tot_hrs+=$((tot_mins / 60))
    tot_mins=$((tot_mins % 60))

    # add each hour component to tot_hrs
    for h in "${hrs[@]}"; do
      ((tot_hrs += h))
    done

    # print final time
    if ((seconds)); then
      printf '%02d:%02d:%02d\n' "$tot_hrs" "$tot_mins" "$tot_secs"
    else
      printf '%02d:%02d\n' "$tot_hrs" "$tot_mins"
    fi
    ;;
  sub)
    ;;
  # somehow, oper is invalid (should never happen)
  *)
    printf 'invalid operation: %s\n' "$oper" >&2
    exit 1
    ;;
esac



# Copyright Daniel Mills <dm@e36freak.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
