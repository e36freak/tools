#!/usr/bin/gawk -f

# usage: pac_removed -- [OPTIONS] LOGFILE
#
# The '--' is required, so AWK itself doesn't read the options
#
# Parses LOGFILE, in the standard pacman.log format, listing all removed
# packages that have not been reinstalled. LOGFILE must be in the original
# sorted format.
#
#  Options:
#   -d, --date DATE         Only show files removed after DATE. DATE is an epoch
#                           time.
#   -t, --time TIME         Only show files removed within the last TIME. Valid
#                           values for TIME are explained below
#   -q, --quiet             Do not show timestamps, versions, or color
#   -0, --null              Like --quiet, but separate the package names with NUL
#                           bytes instead of newlines
#   -f, --format FORMAT     Use FORMAT for the timestamp outputs. FORMAT is
#                           anything valid for strftime(3)
#   -c, --color             Colorize output
#   -i, --include PATTERN   Only include packages that match the extended regular
#                           expression PATTERN. Can be used multiple times
#   -e, --exclude PATTERN   Do not include packages that match the extended
#                           regular expression PATTERN. Can be used multiple times
#   -h, --help              Display this help and exit
#
# The --date and --time options are mutually exclusive, and may only be used
# once. If multiple dates/times are given, only the last one passed will be
# used.
#
# TIME may be a positive integer, in which case it is seconds. It may also have
# one of the following suffixes, case-insensitive:
#   s    seconds
#   m    minutes
#   h    hours
#   d    days



## usage: getopts(optstring [, longopt_array ])
## Parses options, and deletes them from ARGV. "optstring" is of the form
## "ab:c". Each letter is a possible option. If the letter is followed by a
## colon (:), then the option requires an argument. If an argument is not
## provided, or an invalid option is given, getopts will print the appropriate
## error message and return "?". Returns each option as it's read, and -1 when
## no options are left. "optind" will be set to the index of the next
## non-option argument when finished. "optarg" will be set to the option's
## argument, when provided. If not provided, "optarg" will be empty. "optname"
## will be set to the current option, as provided. Getopts will delete each
## option and argument that it successfully reads, so awk will be able to treat
## whatever's left as filenames/assignments, as usual. If provided,
## "longopt_array" is the name of an associative array that maps long options to
## the appropriate short option (do not include the hyphens on either).
## Sample usage can be found in the examples dir, with gawk extensions, or in
## the ogrep script for a POSIX example: https://github.com/e36freak/ogrep
function getopts(optstring, longarr,    opt, trimmed, hasarg, repeat) {
  hasarg = repeat = 0;
  # increment optind
  optind++;

  # return -1 if the current arg is not an option or there are no args left
  if (ARGV[optind] !~ /^-/ || optind >= ARGC) {
    return -1;
  }

  # if option is "--" (end of options), delete arg and return -1
  if (ARGV[optind] == "--") {
    for (i=1; i<=optind; i++) {
      delete ARGV[i];
    }
    return -1;
  }

  # if the option is a long argument...
  if (ARGV[optind] ~ /^--/) {
    # trim hyphens
    trimmed = substr(ARGV[optind], 3);
    # if of the format --foo=bar, split the two. assign "bar" to optarg and
    # set hasarg to 1
    if (trimmed ~ /.*=.*/) {
      optarg = trimmed;
      sub(/=.*/, "", trimmed); sub(/^[^=]*=/, "", optarg);
      hasarg = 1;
    }
    
    # invalid long opt
    if (!(trimmed in longarr)) {
      printf("unrecognized option -- '%s'\n", ARGV[optind]) > "/dev/stderr";
      return "?";
    }

    opt = longarr[trimmed];
    # set optname by prepending dashes to the trimmed argument
    optname = "--" trimmed;

  # otherwise, it is a short option
  } else {
    # remove the hyphen, and get just the option letter
    opt = substr(ARGV[optind], 2, 1);
    # set trimmed to whatevers left
    trimmed = substr(ARGV[optind], 3);

    # invalid option
    if (!index(optstring, opt)) {
      printf("invalid option -- '%s'\n", opt) > "/dev/stderr";
      return "?";
    }

    # if there is more to the argument than just -o
    if (length(trimmed)) {
      # if option requires an argument, set the rest to optarg and hasarg to 1
      if (index(optstring, opt ":")) {
        optarg = trimmed;
        hasarg = 1;

      # otherwise, prepend a hyphen to the rest and set repeat to 1, so the
      # same arg is processed again without the first option
      } else {
        ARGV[optind] = "-" trimmed;
        repeat = 1;
      }
    }

    # set optname by prepending a hypen to opt
    optname = "-" opt;
  }

  # if the option requires an arg and hasarg is 0
  if (index(optstring, opt ":") && !hasarg) {
    # increment optind, check if no arguments are left
    if (++optind >= ARGC) {
      printf("option requires an argument -- '%s'\n", optname) > "/dev/stderr";
      return "?";
    }

    # set optarg
    optarg = ARGV[optind];

  # if repeat is set, decrement optind so we process the same arg again
  # mutually exclusive to needing an argument, otherwise hasarg would be set
  } else if (repeat) {
    optind--;
  }

  # delete all arguments up to this point, just to make sure
  for (i=1; i<=optind; i++) {
    delete ARGV[i];
  }

  # return the option letter
  return opt;
}

## usage: isint(string)
## returns 1 if "string" is a valid integer, otherwise 0
function isint(str) {
  if (str !~ /^-?[0-9]+$/) {
    return 0;
  }

  return 1;
}

## usage: set_cols() **
##   sets the following variables with tput. printing them will format any
##   text afterwards. colors and formats are:
##     bold - bold text (can be combined with a color)
##     black - black text
##     red - red text
##     green - green text
##     yellow - yellow text
##     blue - blue text
##     magenta - magenta text
##     cyan - cyan text
##     white - white text
##     reset - resets to default settings
function set_cols() {
  # bold
  cmd = "tput bold";
  cmd | getline bold;
  close(cmd);
  # black
  cmd = "tput setaf 0";
  cmd | getline black;
  close(cmd);
  # red
  cmd = "tput setaf 1";
  cmd | getline red;
  close(cmd);
  # green
  cmd = "tput setaf 2";
  cmd | getline green;
  close(cmd);
  # yellow
  cmd = "tput setaf 3";
  cmd | getline yellow;
  close(cmd);
  # blue
  cmd = "tput setaf 4";
  cmd | getline blue;
  close(cmd);
  # magenta
  cmd = "tput setaf 5";
  cmd | getline magenta;
  close(cmd);
  # cyan
  cmd = "tput setaf 6";
  cmd | getline cyan;
  close(cmd);
  # white
  cmd = "tput setaf 7";
  cmd | getline white;
  close(cmd);
  # reset
  cmd = "tput sgr0";
  cmd | getline reset;
  close(cmd);
}

## usage: shell_esc(string)
## returns the string escaped so that it can be used in a shell command
function shell_esc(str) {
  gsub(/'/, "'\\''", str);

  return "'" str "'";
}

# print usage information
function usage() {
  printf("%s\n\n%s\n\n%s\n%s\n%s\n\n",
"usage: pac_removed -- [OPTIONS] LOGFILE",
"The '--' is required, so AWK itself doesn't read the options",
"Parses LOGFILE, in the standard pacman.log format, listing all removed",
"packages that have not been reinstalled. LOGFILE must be in the original",
"sorted format." \
) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",
" Options:",
"  -d, --date DATE         Only show files removed after DATE. DATE is an epoch",
"                          time.",
"  -t, --time TIME         Only show files removed within the last TIME. Valid",
"                          values for TIME are explained below",
"  -q, --quiet             Do not show timestamps and versions in the output",
"  -0, --null              Like --quiet, but separate the package names with NUL",
"                          bytes instead of newlines",
"  -c, --color             Colorize output",
"  -f, --format FORMAT     Use FORMAT for the timestamp outputs. FORMAT is",
"                          anything valid for strftime(3)",
"  -i, --include PATTERN   Only include packages that match the extended regular",
"                          expression PATTERN. Can be used multiple times",
"  -e, --exclude PATTERN   Do not include packages that match the extended",
"                          regular expression PATTERN. Can be used multiple times",
"  -h, --help              Display this help and exit" \
) > "/dev/stderr";
  printf("%s\n%s\n%s\n\n",
"The --date and --time options are mutually exclusive, and may only be used",
"once. If multiple dates/times are given, only the last one passed will be",
"used." \
) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n%s\n",
"TIME may be a positive integer, in which case it is seconds. It may also have",
"one of the following suffixes, case-insensitive:",
"  s    seconds",
"  m    minutes",
"  h    hours",
"  d    days" \
) > "/dev/stderr";
}

BEGIN {
  FS = "[][]";

  # initialize default variables
  err = toexit = 0;
  hasdate = date = hastime = time = quiet = nul = color =  hasinc = hasexc = 0;
  tsformat = "%F %H:%M";

  # map long options to short ones
  longopts["date"]    = "d";
  longopts["time"]    = "t";
  longopts["quiet"]   = "q";
  longopts["null"]    = "0";
  longopts["color"]   = "c";
  longopts["format"]  = "f";
  longopts["include"] = "i";
  longopts["exclude"] = "e";
  longopts["help"]    = "h";

  # read the options
  while ((opt = getopts("d:t:q0cf:i:e:h", longopts)) != -1) {
    switch(opt) {
      # -d, --date
      case "d":
        # make sure DATE is valid
        if (!isint(optarg) || optarg < 0) {
          printf("`%s' is not valid for `%s', must be an epoch time\n",
                 optarg, optname) > "/dev/stderr";
          err = toexit = 1; exit;
        }
        hasdate = 1;
        date = optarg;
        break;

      # -t, --time
      case "t":
        # make sure TIME is valid
        if (optarg !~ /^[0-9]+[smhd]?$/) {
          printf("`%s' is not valid for `%s'\n",
                 optarg, optname) > "/dev/stderr";
          err = toexit = 1; exit;
        }
        hastime = hasdate = 1;
        time = optarg;
        break;

      # -q, --quiet
      case "q":
        quiet = 1; break;

      # -0, --null
      case "0":
        nul = 1; break;

      # -c, --color
      case "c":
        color = 1; break;

      # -f, --format
      case "f":
        tsformat = optarg; break;

      # -i, --include
      case "i":
        hasinc = 1; inc_patts[optarg]; break;

      # -e, --exclude
      case "e":
        hasexc = 1; exc_patts[optarg]; break;

      # -h, --help
      case "h":
        usage(); toexit = 1; exit;

      # error
      case "?":
      default:
        err = toexit = 1; exit;
    }
  }

  # if TIME was given, turn it into DATE
  if (hastime) {
    # if a suffix was used, convert it to seconds
    if (time ~ /[smhd]$/) {
      tspec = substr(time, length(time) - 1);

      switch(tspec) {
        case "s":
          time = time + 0; break;
        case "m":
          time = time * 60; break;
        case "h":
          time = time * 60 * 60; break;
        case "d":
          time = time * 60 * 60 * 24; break;
      }
    }

    # subtract from the current time to get DATE
    date = systime() - time;
  }

  # if --null was used, change ORS to the NUL byte
  if (nul) {
    ORS = "\0";
  }

  # if --color was used, and --quiet was not, set colors
  if (color && !quiet) {
    set_cols();
  }
}

# for each line in the input...
{
  timestamp = $2;
  # convert timestamp to epoch
  len = split(timestamp, ts, /[ :-]+/);
  epoch = mktime(ts[1] " " ts[2] " " ts[3] " " ts[4] " " ts[5] " 00");

  # invalid timestamp, skip line
  if (epoch == -1) {
    next;
  }

  # if --date or --time was used, determine if line is to be skipped
  if (hasdate && epoch < date) {
    next;
  }

  # get action and package information
  len = split($3, info, /[[:blank:]]+/);
  action = info[2];
  package = info[3];
  len = split($3, info, /[()]/);
  version = info[len-1];

  # filter for --include and --exclude
  if (hasinc) {
    flag = 0;
    for (patt in inc_patts) {
      if (package ~ patt) {
        flag = 1;
        break;
      }
    }

    if (!flag) {
      next;
    }
  }
  if (hasexc) {
    for (patt in exc_patts) {
      if (package ~ patt) {
        next;
      }
    }
  }

  # add or delete package from arrays
  switch(action) {
    case "removed":
      times[package] = epoch;
      versions[package] = version;
      break;

    case "installed":
      delete times[package];
      delete versions[package];
      break;
  }
}

# after all input is read...
END {
  # if exit was called, exit without printing
  if (toexit) {
    exit err;
  }

  # iterate over remaining packages and create an array with epochs and names
  for (pkg in times) {
    tosort[times[pkg],pkg];
  }

  # sort out array
  len = asorti(tosort, out, "@ind_num_asc");

  # iterate over out array, format output, and print
  for (i=1; i<=len; i++) {
    split(out[i], info, SUBSEP);
    time = strftime(tsformat, info[1]);
    package = info[2];

    if (quiet) {
      print package;
    } else if (color) {
      printf("%s[%s]%s %s%s%s %s%s%s\n", bold blue, time, reset, bold, package,
             reset, bold green, versions[package], reset);
    } else {
      printf("[%s] %s %s\n", time, package, versions[package]);
    }
  }
}
