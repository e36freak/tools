#!/usr/bin/gawk -f

# usage: sub -- [OPTIONS] SEARCH REPLACE [FILE(s)]
#        sub -- [OPTIONS] -f PATTERN_FILE [FILE(s)]
# 
# The '--' is required, so AWK itself doesn't read the options
# 
# In the 1st form, replace SEARCH with REPLACE in FILE(s), or stdin if no files
# are provided or a target filename is '-'.
# 
# In the 2nd form, read SEARCH and REPLACE strings from PATTERN_FILE, and
# replace each SEARCH string with the appropriate REPLACE string.
# The file format is as follows:
#   SEARCH
#   REPLACE
#   SEARCH
#   REPLACE
# Each REPLACE string corresponds to the SEARCH string on the previous line. If
# '-' is used as PATTERN_FILE, the list of patterns will be read from the
# standard input and target FILEs are required. If there is an uneven number of
# lines, the last SEARCH string will not be used. Empty SEARCH strings and their
# corresponding REPLACE strings will be silently ignored.
# 
#  Options:
#   -f, --file FILE  read SEARCH and REPLACE strings from FILE, instead of the
#                    positional parameters. can be used multiple times for more
#                    than one pattern file
#   -g, --global     replaces all matches on each line, instead of just the first
#   -i, --in-place   edit FILE(s) in place, instead of printing to stdout. this
#                    option is ignored when reading the standard input
#   -h, --help       display this help and exit
# 
# SEARCH strings must be non-empty, but REPLACE strings may be empty to replace
# SEARCH with nothing. (note that an argument (or line with -f) is still
# required, but it may be the empty string)

# TODO:
#  rewrite for POSIX



## usage: getopts(optstring [, longopt_array ])
## Parses options, and deletes them from ARGV. "optstring" is of the form
## "ab:c". Each letter is a possible option. If the letter is followed by a
## colon (:), then the option requires an argument. If an argument is not
## provided, or an invalid option is given, getopts will print the appropriate
## error message and return "?". Returns each option as it's read, and -1 when
## no options are left. "optind" will be set to the index of the next
## non-option argument when finished. "optarg" will be set to the option's
## argument, when provided. If not provided, "optarg" will be empty. "optname"
## will be set to the current option, as provided. Getopts will delete each
## option and argument that it successfully reads, so awk will be able to treat
## whatever's left as filenames/assignments, as usual. If provided,
## "longopt_array" is the name of an associative array that maps long options to
## the appropriate short option (do not include the hyphens on either).
## Sample usage can be found in the examples dir, with gawk extensions, or in
## the ogrep script for a POSIX example: https://github.com/e36freak/ogrep
function getopts(optstring, longarr,    opt, trimmed, hasarg, repeat) {
  hasarg = repeat = 0;
  optarg = "";
  # increment optind
  optind++;

  # return -1 if the current arg is not an option or there are no args left
  if (ARGV[optind] !~ /^-/ || optind >= ARGC) {
    return -1;
  }

  # if option is "--" (end of options), delete arg and return -1
  if (ARGV[optind] == "--") {
    for (i=1; i<=optind; i++) {
      delete ARGV[i];
    }
    return -1;
  }

  # if the option is a long argument...
  if (ARGV[optind] ~ /^--/) {
    # trim hyphens
    trimmed = substr(ARGV[optind], 3);
    # if of the format --foo=bar, split the two. assign "bar" to optarg and
    # set hasarg to 1
    if (trimmed ~ /=/) {
      optarg = trimmed;
      sub(/=.*/, "", trimmed); sub(/^[^=]*=/, "", optarg);
      hasarg = 1;
    }
    
    # invalid long opt
    if (!(trimmed in longarr)) {
      printf("unrecognized option -- '%s'\n", ARGV[optind]) > "/dev/stderr";
      return "?";
    }

    opt = longarr[trimmed];
    # set optname by prepending dashes to the trimmed argument
    optname = "--" trimmed;

  # otherwise, it is a short option
  } else {
    # remove the hyphen, and get just the option letter
    opt = substr(ARGV[optind], 2, 1);
    # set trimmed to whatevers left
    trimmed = substr(ARGV[optind], 3);

    # invalid option
    if (!index(optstring, opt)) {
      printf("invalid option -- '%s'\n", opt) > "/dev/stderr";
      return "?";
    }

    # if there is more to the argument than just -o
    if (length(trimmed)) {
      # if option requires an argument, set the rest to optarg and hasarg to 1
      if (index(optstring, opt ":")) {
        optarg = trimmed;
        hasarg = 1;

      # otherwise, prepend a hyphen to the rest and set repeat to 1, so the
      # same arg is processed again without the first option
      } else {
        ARGV[optind] = "-" trimmed;
        repeat = 1;
      }
    }

    # set optname by prepending a hypen to opt
    optname = "-" opt;
  }

  # if the option requires an arg and hasarg is 0
  if (index(optstring, opt ":") && !hasarg) {
    # increment optind, check if no arguments are left
    if (++optind >= ARGC) {
      printf("option requires an argument -- '%s'\n", optname) > "/dev/stderr";
      return "?";
    }

    # set optarg
    optarg = ARGV[optind];

  # if repeat is set, decrement optind so we process the same arg again
  # mutually exclusive to needing an argument, otherwise hasarg would be set
  } else if (repeat) {
    optind--;
  }

  # delete all arguments up to this point, just to make sure
  for (i=1; i<=optind; i++) {
    delete ARGV[i];
  }

  # return the option letter
  return opt;
}

## usage: lsub(str, repl [, in])
## substites the string "repl" in place of the first instance of "str" in the
## string "in" and returns the result. does not modify the original string.
## if "in" is not provided, uses $0.
function lsub(str, rep, val,    len, i) {
  # if "in" is not provided, use $0
  if (!length(val)) {
    val = $0;
  }

  # get the length of val, in order to know how much of the string to remove
  if (!(len = length(str))) {
    # if "str" is empty, just prepend "rep" and return
    val = rep val;
    return val;
  }

  # substitute val for rep
  if (i = index(val, str)) {
    val = substr(val, 1, i - 1) rep substr(val, i + len);
  }

  # return the result
  return val;
}

## usage: glsub(str, repl [, in])
## behaves like lsub, except it replaces all occurances of "str"
function glsub(str, rep, val,    out, len, i, a, l) {
  # if "in" is not provided, use $0
  if (!length(val)) {
    val = $0;
  }
  # empty the output string
  out = "";

  # get the length of val, in order to know how much of the string to remove
  if (!(len = length(str))) {
    # if "str" is empty, adds "rep" between every character and returns
    l = split(val, a, //);
    for (i=1; i<=l; i++) {
      out = out rep a[i];
    }

    return out rep;
  }

  # loop while 'val' is in 'str'
  while (i = index(val, str)) {
    # append everything up to the search string, and the replacement, to out
    out = out substr(val, 1, i - 1) rep;
    # remove everything up to and including the first instance of str from val
    val = substr(val, i + len);
  }

  # append whatever is left in val to out and return
  return out val;
}

## usage: shell_esc(string)
## returns the string escaped so that it can be used in a shell command
function shell_esc(str) {
  gsub(/'/, "'\\''", str);

  return "'" str "'";
}

# print usage info
function usage() {
  printf("%s\n%s\n\n%s\n\n%s\n%s\n\n",
"usage: sub -- [OPTIONS] SEARCH REPLACE [FILE(s)]",
"       sub -- [OPTIONS] -f PATTERN_FILE [FILE(s)]",
"The '--' is required, so AWK itself doesn't read the options",
"In the 1st form, replace SEARCH with REPLACE in FILE(s), or stdin if no files",
"are provided or a target filename is '-'." \
  ) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",
"In the 2nd form, read SEARCH and REPLACE strings from PATTERN_FILE, and",
"replace each SEARCH string with the appropriate REPLACE string.",
"The file format is as follows:",
"  SEARCH", "  REPLACE", "  SEARCH", "  REPLACE",
"Each REPLACE string corresponds to the SEARCH string on the previous line. If",
"'-' is used as PATTERN_FILE, the list of patterns will be read from the",
"standard input and target FILEs are required. If there is an uneven number of",
"lines, the last SEARCH string will not be used. Empty SEARCH strings and their",
"corresponding REPLACE strings will be silently ignored." \
  ) > "/dev/stderr";
  printf("%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n\n",
" Options:",
"  -f, --file FILE  read SEARCH and REPLACE strings from FILE, instead of the",
"                   positional parameters. can be used multiple times for more",
"                   than one pattern file",
"  -g, --global     replaces all matches on each line, instead of just the first",
"  -i, --in-place   edit FILE(s) in place, instead of printing to stdout. this",
"                   option is ignored when reading the standard input",
"  -h, --help       display this help and exit" \
  ) > "/dev/stderr";
  printf("%s\n%s\n%s\n",
"SEARCH strings must be non-empty, but REPLACE strings may be empty to replace",
"SEARCH with nothing. (note that an argument (or line with -f) is still",
"required, but it may be the empty string)" \
  ) > "/dev/stderr";
}

BEGIN {
  # initialize variables to defaults
  err = global = in_place = has_patts = patterns = patts_from_stdin = 0;

  # map long options to short options
  longopts["file"]     = "f";
  longopts["global"]   = "g";
  longopts["in-place"] = "i";
  longopts["help"]     = "h";

  # parse options
  while ((opt = getopts("f:gih", longopts)) != -1) {
    switch(opt) {
      # -f, --file
      case "f":
        # if FILE is '-', patterns are coming from stdin
        if (optarg = "-") {
          patts_from_stdin = 1;

        # otherwise, check to make sure it is a file or fifo and is readable
        } else {
          file = shell_esc(optarg);
          if ((system("test -f " file) && system("test -p " file)) ||
               system("test -r " file)) {
            printf("%s: permission denied\n", optarg) > "/dev/stderr";
            err = 1; exit;
          }
        }

        # read in each pair of lines from FILE, add to array
        while ((getline search < optarg) > 0 && (getline rep < optarg) > 0) {
          # search string may not be empty
          if (!length(search)) {
            continue;
          }

          patterns++;
          searches[patterns] = search;
          replaces[patterns] = search;
        }

        # do not use the positional parameters for the patterns
        has_patts = 1;
        break;

      # -g, --global
      case "g":
        global = 1; break;

      # -i, --in-place
      case "i":
        in_place = 1; break;

      # -h, --help
      case "h":
        usage(); exit;

      # error
      case "?":
      default:
        err = 1; exit;
    }
  }

  # if -f was used, make sure everything is valid
  if (has_patts) {
    # if no valid patterns were in the file(s), fail
    if (!patterns) {
      printf("no valid SEARCH/REPLACE pairs provided\n") > "/dev/stderr";
      err = 1; exit;
    }

    # if stdin was used, make sure there are files given
    if (patts_from_stdin && optind >= ARGC) {
      printf("no input file\n") > "/dev/stderr";
      err = 1; exit;
    }

  # get SEARCH and REPLACE from ARGV if -f was not used
  } else {
    # increment optind
    optind++;
    if (optind >= ARGC || !length(ARGV[optind-1])) {
      printf("no SEARCH or REPLACE string provided\n") > "/dev/stderr";
      err = 1; exit;
    }

    # assign strings to array
    patterns++;
    searches[patterns] = ARGV[optind-1];
    replaces[patterns] = ARGV[optind];

    # delete the args
    for (i=1; i<=optind; i++) {
      delete ARGV[i];
    }
  }
}

# before reading each input file, if -i was passed, create a temp file
BEGINFILE {
  if (in_place) {
    cmd = "mktemp";
    cmd | getline tmp;
    close(cmd);

    # add temp file name to the temps array
    temps[tmp];
  }
}

# actually do the substitutions
{
  # loop over each pattern pair
  for (p=1; p<=patterns; p++) {
    # substitute
    if (global) {
      $0 = glsub(searches[p], replaces[p]);
    } else {
      $0 = lsub(searches[p], replaces[p]);
    }
  }

  # print line, to stdout or temp file
  if (in_place) {
    print > tmp;
  } else {
    print;
  }
}

# after reading each file, if -i was passed, overwrite the original with
# the temp
ENDFILE {
  if (in_place) {
    close(tmp);
    system("mv " shell_esc(tmp) " " shell_esc(FILENAME));
  }
}

END {
  # clean up on exit, and exit according to "err"
  if (in_place) {
    for (tmp in temps) {
      system("rm -f " shell_esc(tmp));
    }
  }

  exit err;
}



# Copyright Daniel Mills <dm@e36freak.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
