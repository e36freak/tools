#!/bin/bash

# usage: update_gits [OPTIONS] [DIR ...]
#
# Find and update all git repositories (with git pull) within DIR, or the
# current working directory if DIR is not provided. By default, only check for
# repositories in the highest level sub-directories. Requires GNU find.
#
#  Options:
#   -r, --recursive       Search for repositories within DIR recursively
#   -m, --maxdepth DEPTH  Limit recursiveness to DEPTH levels, just like GNU
#                         find's -maxdepth option. Implies --recursive
#   -e, --exclude PATT    Do not check directories matching PATT, and do not
#                         descend into them when searching recursively. PATT is
#                         a shell pattern, as used for find -name. May be
#                         provided multiple times to exclude multiple patterns
#   -i, --ignore-case     Make any instance of PATT case insensitive
#   -q, --quiet           Only output for repos that are updated
#   -h, --help            Display this help and exit



# default global vars, shopts, etc
shopt -s extglob nullglob
recursive=0
has_maxd=0
maxdepth=1
to_exclude=()
icase=0
quiet=0

usage() {
  cat <<'EOF'
usage: update_gits [OPTIONS] [DIR ...]

Find and update all git repositories (with git pull) within DIR, or the
current working directory if DIR is not provided. By default, only check for
repositories in the highest level sub-directories. Requires GNU find.

 Options:
  -r, --recursive       Search for repositories within DIR recursively
  -m, --maxdepth DEPTH  Limit recursiveness to DEPTH levels, just like GNU
                        find's -maxdepth option. Implies --recursive
  -e, --exclude PATT    Do not check directories matching PATT, and do not
                        descend into them when searching recursively. PATT is
                        a shell pattern, as used for find -name. May be
                        provided multiple times to exclude multiple patterns
  -i, --ignore-case     Make any instance of PATT case insensitive
  -q, --quiet           Only output for repos that are updated
  -h, --help            Display this help and exit
EOF
}

# option string, for short options.
# very much like getopts, any option followed by a ':' takes a required arg
optstring=rm:e:iqh

# iterate over options, breaking -ab into -a -b and --foo=bar into --foo bar
# also turns -- into --endopts to avoid issues with things like '-o-', the '-'
# should not indicate the end of options, but be an invalid option (or the
# argument to the option, such as wget -qO-)
unset options
while (($#)); do
  case $1 in
    -[!-]?*)
      for ((i=1; i<${#1}; i++)); do
        c=${1:i:1} options+=("-$c")

        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*) options+=("${1%%=*}" "${1#*=}");;
    --)
      options+=(--endopts); shift
      options+=("$@"); break
      ;;
    *) options+=("$1");;
  esac

  shift
done
set -- "${options[@]}"
unset options

# actually parse the options and do stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -r|--recursive) recursive=1;;
    -m|--maxdepth)
      if [[ -z $2 ]]; then
        printf 'No DEPTH provided for %s\n' "$1" >&2
        exit 1
      fi
      if [[ $2 = *[!0-9]* ]]; then
        printf 'Invalid DEPTH: %s\n' "$2" >&2
        exit 1
      fi
      recursive=1
      has_maxd=1
      maxdepth=$2
      shift
      ;;
    -e|--exclude)
      if [[ -z $2 ]]; then
        printf 'No PATT provided for %s\n' "$1" >&2
        exit 1
      fi
      to_exclude+=("$2")
      shift
      ;;
    -i|--ignore-case) icase=1;;
    -q|--quiet) quiet=1;;
    -h|--help) usage >&2; exit 0;;
    --endopts) shift; break;;
    *) printf 'Invalid option: %s\n' "$1" >&2; exit 1;;
  esac

  shift
done

# build the find options
findopts=()
if ((!recursive)); then
  findopts+=(-maxdepth 1)
elif ((has_maxd)); then
  findopts+=(-maxdepth "$maxdepth")
fi

if ((${#to_exclude[@]})); then
  findopts+=(-type d '(')

  if ((icase)); then
    findopts+=(-iname "${to_exclude[0]}")
  else
    findopts+=(-name "${to_exclude[0]}")
  fi

  for ex in "${to_exclude[@]:1}"; do
    if ((icase)); then
      findopts+=(-o -iname "$ex")
    else
      findopts+=(-o -name "$ex")
    fi
  done

  findopts+=(')' -prune -o)
fi

findopts+=(
-type d
-exec test -f {}/.git/HEAD \; 
-exec sh -c 'cd "$1" && git rev-parse 2>/dev/null' _ {} \;
-print0
)

# run the find command, loop over each found directory
while IFS= read -rd '' repo; do
  # update the repo
  (
    if ! cd "$repo"; then
      printf 'Error changing into repo/directory: %s\n' "$repo" >&2
      exit 1
    fi

    if ((quiet)); then
      if ! out=$(git pull); then
        printf 'Error updating repo/directory: %s\n\n' "$repo" >&2
        exit 1
      fi
      if [[ $out != *"Already up-to-date"* ]]; then
        printf 'Updating repo/directory: %s\n' "$repo"
        printf '%s\n\n' "$out"
      fi

    else
      printf 'Updating repo/directory: %s\n' "$repo"
      if ! git pull; then
        printf 'Error updating repo/directory: %s\n\n' "$repo" >&2
        exit 1
      fi

      echo
    fi
  )
done < <(find "${@:-.}" "${findopts[@]}" 2>/dev/null)



# Copyright Daniel Mills <dm@e36freak.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
