#!/bin/awk -f

# usage: merge -- [OPTIONS] [FILE ...]
#
# The '--' is required, so AWK itself doesn't read the options
#
# Merge sorted FILEs into one, and print the result to the standard output.
#
#  Options:
#   -h, --help    Display this help and exit



## usage: getopts(optstring [, longopt_array ])
## Parses options, and deletes them from ARGV. "optstring" is of the form
## "ab:c". Each letter is a possible option. If the letter is followed by a
## colon (:), then the option requires an argument. If an argument is not
## provided, or an invalid option is given, getopts will print the appropriate
## error message and return "?". Returns each option as it's read, and -1 when
## no options are left. "optind" will be set to the index of the next
## non-option argument when finished. "optarg" will be set to the option's
## argument, when provided. If not provided, "optarg" will be empty. "optname"
## will be set to the current option, as provided. Getopts will delete each
## option and argument that it successfully reads, so awk will be able to treat
## whatever's left as filenames/assignments, as usual. If provided,
## "longopt_array" is the name of an associative array that maps long options to
## the appropriate short option (do not include the hyphens on either).
## Sample usage can be found in the examples dir, with gawk extensions, or in
## the ogrep script for a POSIX example: https://github.com/e36freak/ogrep
function getopts(optstring, longarr,    opt, trimmed, hasarg, repeat) {
  hasarg = repeat = 0;
  optarg = "";
  # increment optind
  optind++;

  # return -1 if the current arg is not an option or there are no args left
  if (ARGV[optind] !~ /^-/ || optind >= ARGC) {
    return -1;
  }

  # if option is "--" (end of options), delete arg and return -1
  if (ARGV[optind] == "--") {
    for (i=1; i<=optind; i++) {
      delete ARGV[i];
    }
    return -1;
  }

  # if the option is a long argument...
  if (ARGV[optind] ~ /^--/) {
    # trim hyphens
    trimmed = substr(ARGV[optind], 3);
    # if of the format --foo=bar, split the two. assign "bar" to optarg and
    # set hasarg to 1
    if (trimmed ~ /.*=.*/) {
      optarg = trimmed;
      sub(/=.*/, "", trimmed); sub(/^[^=]*=/, "", optarg);
      hasarg = 1;
    }
    
    # invalid long opt
    if (!(trimmed in longarr)) {
      printf("unrecognized option -- '%s'\n", ARGV[optind]) > "/dev/stderr";
      return "?";
    }

    opt = longarr[trimmed];
    # set optname by prepending dashes to the trimmed argument
    optname = "--" trimmed;

  # otherwise, it is a short option
  } else {
    # remove the hyphen, and get just the option letter
    opt = substr(ARGV[optind], 2, 1);
    # set trimmed to whatevers left
    trimmed = substr(ARGV[optind], 3);

    # invalid option
    if (!index(optstring, opt)) {
      printf("invalid option -- '%s'\n", opt) > "/dev/stderr";
      return "?";
    }

    # if there is more to the argument than just -o
    if (length(trimmed)) {
      # if option requires an argument, set the rest to optarg and hasarg to 1
      if (index(optstring, opt ":")) {
        optarg = trimmed;
        hasarg = 1;

      # otherwise, prepend a hyphen to the rest and set repeat to 1, so the
      # same arg is processed again without the first option
      } else {
        ARGV[optind] = "-" trimmed;
        repeat = 1;
      }
    }

    # set optname by prepending a hypen to opt
    optname = "-" opt;
  }

  # if the option requires an arg and hasarg is 0
  if (index(optstring, opt ":") && !hasarg) {
    # increment optind, check if no arguments are left
    if (++optind >= ARGC) {
      printf("option requires an argument -- '%s'\n", optname) > "/dev/stderr";
      return "?";
    }

    # set optarg
    optarg = ARGV[optind];

  # if repeat is set, decrement optind so we process the same arg again
  # mutually exclusive to needing an argument, otherwise hasarg would be set
  } else if (repeat) {
    optind--;
  }

  # delete all arguments up to this point, just to make sure
  for (i=1; i<=optind; i++) {
    delete ARGV[i];
  }

  # return the option letter
  return opt;
}

# print the usage information
function usage() {
  printf("%s\n\n%s\n\n%s\n\n%s\n%s\n",
"usage: merge -- [OPTIONS] [FILE ...]",
"The '--' is required, so AWK itself doesn't read the options",
"Merge sorted FILEs into one, and print the result to the standard output.",
" Options:",
"  -h, --help    Display this help and exit" \
) > "/dev/stderr";
}

BEGIN {
  # map long options to short ones
  longopts["help"] = "h";

  # read in the options
  while ((opt = getopts("h", longopts)) != -1) {
    # -h, --help
    if (opt == "h") {
      usage(); exit;

    # error
    } else {
      exit 1;
    }
  }

  # make sure there are filenames
  if (optind >= ARGC) {
    printf("no input files given\n") > "/dev/stderr";
    exit 1;
  }

  # create array of input files
  tot_files = 0;
  for (arg=optind; arg<ARGC; arg++) {
    files[++tot_files] = ARGV[arg];
  }

  # get initial lines
  for (file=1; file<=tot_files; file++) {
    if ((getline < files[file]) > 0) {
      lines[file] = $0;
    } else {
      finished[file] = 1;
    }
  }

  # loop continuously
  while (1) {
    # make sure there is at least one unfinished file
    unfinished = 0;

    # set the highest initial line as the first line left
    for (file=1; file<=tot_files; file++) {
      if (!finished[file]) {
        first = lines[file];
        first_file = file;
  
        unfinished = 1;
        break;
      }
    }

    # if there are no files left, break the loop
    if (!unfinished) {
      break;
    }

    # loop over each input file, find the highest sorted line
    for (file=1; file<=tot_files; file++) {
      if (!finished[file] && lines[file] < first) {
        first = lines[file];
        first_file = file;
      }
    }

    # print the highest sorted line
    print first;

    # get the next line from that file
    if ((getline < files[first_file]) > 0) {
      lines[first_file] = $0;

    # no more lines for that file
    } else {
      finished[first_file] = 1;
    }
  }
}



# Copyright Daniel Mills <dm@e36freak.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
